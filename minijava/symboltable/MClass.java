package minijava.symboltable;import java.util.Vector;public class MClass extends MType {	public String name;	//类名	public MClasses all_classes;	public Vector variables = new Vector(); //类中的变量	public Vector methods = new Vector();	//类中的方法	public String fa_name;	//父类名称	public MClass fa = null;	//父类	public int line;	//类申明所在的行数	//构造函数	public MClass(String v_name, MClasses all, String _fa_name, int _line) {		name = v_name;		all_classes = all;		fa_name = _fa_name;		line = _line;	}	//添加一个变量	public String InsertVariable(MVariable v_variable) {		String variable_name = v_variable.name;		if (Repeated(variable_name))			return "Variable double declaration " +"\"" + variable_name +"\"";		variables.addElement(v_variable);		v_variable.safe = true;		return null;	}	//判断变量是否重复	public boolean Repeated(String variable_name) {		int sz = variables.size();		for (int i = 0; i < sz; i++) {			String v_name = ((MVariable)variables.elementAt(i)).name;			if (v_name.equals(variable_name))				return true;		}		return false;	}	//添加一个方法	public String InsertMethod(MMethod v_method) {		String method_name = v_method.name;		if (RepeatedM(method_name))			return "Method double declaration " +"\"" + method_name +"\"";		methods.addElement(v_method);		return null;	}	//判断方法是否重复	public boolean RepeatedM(String method_name) {		int sz = methods.size();		for (int i = 0; i < sz; i++) {			String v_name = ((MMethod)methods.elementAt(i)).name;			if (v_name.equals(method_name))				return true;		}		return false;	}	//打印，用于调试	public void print() {		System.out.println(name+"    "+fa_name);		for (int i = 0; i < variables.size(); ++i) {			((MVariable)variables.elementAt(i)).print();		}		for (int i = 0; i < methods.size(); ++i) {			((MMethod)methods.elementAt(i)).print();		}	}	//获取父类的引用	public boolean get_fa() {		if (fa_name == null)			return false;		for (int i = 0; i < all_classes.mj_classes.size(); ++i) {			MClass tmp = (MClass)all_classes.mj_classes.elementAt(i);			if (tmp.name.equals(fa_name)) {				fa = tmp;				return true;			}		}		return false;	}	//在该类中寻找方法	public MMethod find_method(String name) {		for (int i = 0; i < methods.size(); ++i) {			MMethod tmp = (MMethod)methods.elementAt(i);			if (tmp.name.equals(name))				return tmp;		}		return null;	}	//在该类中寻找变量	public MVariable find_var(String i_name) {		for (int i = 0; i < variables.size(); ++i) {			MVariable tmp = (MVariable)variables.elementAt(i);			if (tmp.name.equals(i_name))				return tmp;		}		return null;	}}