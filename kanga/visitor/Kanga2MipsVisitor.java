//
// Generated by JTB 1.3.2
//

package kanga.visitor;
import java.util.Enumeration;

import kanga.syntaxtree.ALoadStmt;
import kanga.syntaxtree.AStoreStmt;
import kanga.syntaxtree.BinOp;
import kanga.syntaxtree.CJumpStmt;
import kanga.syntaxtree.CallStmt;
import kanga.syntaxtree.ErrorStmt;
import kanga.syntaxtree.Exp;
import kanga.syntaxtree.Goal;
import kanga.syntaxtree.HAllocate;
import kanga.syntaxtree.HLoadStmt;
import kanga.syntaxtree.HStoreStmt;
import kanga.syntaxtree.IntegerLiteral;
import kanga.syntaxtree.JumpStmt;
import kanga.syntaxtree.Label;
import kanga.syntaxtree.MoveStmt;
import kanga.syntaxtree.NoOpStmt;
import kanga.syntaxtree.Node;
import kanga.syntaxtree.NodeList;
import kanga.syntaxtree.NodeListOptional;
import kanga.syntaxtree.NodeOptional;
import kanga.syntaxtree.NodeSequence;
import kanga.syntaxtree.NodeToken;
import kanga.syntaxtree.Operator;
import kanga.syntaxtree.PassArgStmt;
import kanga.syntaxtree.PrintStmt;
import kanga.syntaxtree.Procedure;
import kanga.syntaxtree.Reg;
import kanga.syntaxtree.SimpleExp;
import kanga.syntaxtree.SpilledArg;
import kanga.syntaxtree.Stmt;
import kanga.syntaxtree.StmtList;
import kanga.kanga2mips.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Kanga2MipsVisitor implements GJVisitor<ReturnType,Environment> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public ReturnType visit(NodeList n, Environment argu) {
      ReturnType _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public ReturnType visit(NodeListOptional n, Environment argu) {
      if ( n.present() ) {
         ReturnType _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public ReturnType visit(NodeOptional n, Environment argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public ReturnType visit(NodeSequence n, Environment argu) {
      ReturnType _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public ReturnType visit(NodeToken n, Environment argu) { return null; }

   //
   // User-generated visitor methods below
   //
   
   public void print(String s) {
	   System.out.println(s);
   }
   
   void preproc(String name,int stacknum){
	   print("\n.text");
	   print(".globl "+name);
	   print(name+":");
	   print("sw $fp,"+(-(stacknum+1)*4)+"($sp)");
	   print("sw $ra,"+(-(stacknum+2)*4)+"($sp)");
	   print("move $fp,$sp");
	   print("subu $sp,$sp,"+(stacknum+3)*4);	   
   }
   
   void endproc(int stacknum){
	   print("move $sp,$fp");
	   print("lw $ra,"+(-(stacknum+2)*4)+"($sp)");
	   print("lw $fp,"+(-(stacknum+1)*4)+"($sp)");
	   print("j $ra");	
   }
   
   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> <EOF>
    */
   public ReturnType visit(Goal n, Environment argu) {
      ReturnType _ret=null;
      print(".data");
      print(".align 0");
      print("endl: .asciiz \"\\n\"");
      print("error: .asciiz \"ERROR\\n\"\n");
      preproc("main", Integer.parseInt(n.f5.f0.tokenImage));
      n.f10.accept(this, argu);
      endproc(Integer.parseInt(n.f5.f0.tokenImage));
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public ReturnType visit(StmtList n, Environment argu) {
      ReturnType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public ReturnType visit(Procedure n, Environment argu) {
      ReturnType _ret=null;
      preproc(n.f0.f0.tokenImage,Integer.parseInt(n.f5.f0.tokenImage));
      n.f10.accept(this, argu);
      endproc(Integer.parseInt(n.f5.f0.tokenImage));
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public ReturnType visit(Stmt n, Environment argu) {
      ReturnType _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public ReturnType visit(NoOpStmt n, Environment argu) {
      ReturnType _ret=null;
      print("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public ReturnType visit(ErrorStmt n, Environment argu) {
      ReturnType _ret=null;
      print("sw $a0,0($sp)");
      print("la $a0,error");
      print("li $v0,4");
      print("syscall");
      print("lw $a0,0($sp)");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public ReturnType visit(CJumpStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg = n.f1.accept(this, null);
      print("beqz "+reg+","+n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public ReturnType visit(JumpStmt n, Environment argu) {
      ReturnType _ret=null;
      print("b "+n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public ReturnType visit(HStoreStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg1 = n.f1.accept(this, argu);
      ReturnType reg2 = n.f3.accept(this, argu);
      int i = Integer.parseInt(n.f2.f0.tokenImage);
      print("sw "+reg2+","+i+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public ReturnType visit(HLoadStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg1 = n.f1.accept(this, argu);
      ReturnType reg2 = n.f2.accept(this, argu);
      int i = Integer.parseInt(n.f3.f0.tokenImage);
      print("lw "+reg1+","+i+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public ReturnType visit(MoveStmt n, Environment argu) {
      ReturnType _ret=null;
      argu.reg = n.f1.accept(this, argu); 
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public ReturnType visit(PrintStmt n, Environment argu) {
      ReturnType _ret=null;
      print("sw $a0,0($sp)");
      
      ReturnType exp = n.f1.accept(this, argu);
      if (exp.type == "Int")
    	  print("li $a0,"+exp);
      if (exp.type == "Label")
    	  print("la $a0,"+exp);
      if (exp.type == "Reg")
    	  print("move $a0,"+exp);
      print("li $v0,1");
      print("syscall");
      
      print("la $a0,endl");
      print("li $v0,4");
      print("syscall");
      
      print("lw $a0,0($sp)");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public ReturnType visit(ALoadStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg = n.f1.accept(this, argu);
      int i = (-Integer.parseInt(n.f2.f1.f0.tokenImage)-1)*4;
      print("lw "+reg+","+i+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public ReturnType visit(AStoreStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg = n.f2.accept(this, argu);
      int i = (-Integer.parseInt(n.f1.f1.f0.tokenImage)-1)*4;
      print("sw "+reg+","+i+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public ReturnType visit(PassArgStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType reg = n.f2.accept(this, argu);
      int i = (-Integer.parseInt(n.f1.f0.tokenImage))*4;
      print("sw "+reg+","+i+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public ReturnType visit(CallStmt n, Environment argu) {
      ReturnType _ret=null;
      ReturnType exp = n.f1.accept(this, argu);
      if (exp.type == "Reg")
    	  print("jalr "+exp);
      if (exp.type == "Label")
    	  print("jal "+exp);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public ReturnType visit(Exp n, Environment argu) {
      ReturnType _ret=null;
      _ret = n.f0.accept(this, argu);
      if (_ret != null) {
        	  if (_ret.type == "Int")
        		  print("li "+argu.reg+","+_ret);
        	  if (_ret.type == "Label")
        		  print("la "+argu.reg+","+_ret);
        	  if (_ret.type == "Reg")
        		  print("move "+argu.reg+","+_ret);
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public ReturnType visit(HAllocate n, Environment argu) {
      ReturnType _ret=null;
      print("sw $a0,0($sp)");
      
      ReturnType exp = n.f1.accept(this, argu);
      if (exp.type == "Int")
    	  print("li $a0,"+exp);
      else
    	  print("move $a0,"+exp);
      print("li $v0,9");
	  print("syscall");
	  print("move "+argu.reg+",$v0");
    	  
      print("lw $a0,0($sp)");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public ReturnType visit(BinOp n, Environment argu) {
      ReturnType _ret=null;
      String op=((NodeToken)n.f0.f0.choice).tokenImage;
      ReturnType exp1 = n.f1.accept(this, argu);
      ReturnType exp2 = n.f2.accept(this, argu);
      if (op == "LT")
    	  op = "slt";
      if (op == "PLUS") {
    	  if (exp2.type == "Int")
    		  op = "addi";
    	  else
    		  op = "add";
      }
      if (op == "MINUS") {
    	  if (exp2.type == "Int") {
    		  int i = Integer.parseInt(exp2.value);
    		  exp2.value = ""+(-i);
    		  op = "addi";
    	  }
    	  else
    		  op = "sub";
      }
      if (op == "TIMES")
    	  op = "mul";
      print(op+" "+argu.reg+","+exp1+","+exp2);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public ReturnType visit(Operator n, Environment argu) {
      ReturnType _ret=null;
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public ReturnType visit(SpilledArg n, Environment argu) {
      ReturnType _ret=null;
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public ReturnType visit(SimpleExp n, Environment argu) {
      ReturnType _ret=null;
      argu.k = true;
      _ret = n.f0.accept(this, argu);
      argu.k = false;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public ReturnType visit(Reg n, Environment argu) {
      ReturnType _ret=null;
      String reg=((NodeToken)n.f0.choice).tokenImage;
      _ret = new ReturnType("Reg", "$"+reg);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public ReturnType visit(IntegerLiteral n, Environment argu) {
      ReturnType _ret=new ReturnType("Int", n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public ReturnType visit(Label n, Environment argu) {
      ReturnType _ret=null;
      if (argu.k == false) {
    	  print(n.f0.tokenImage+": nop");
		  return _ret;
      }
      _ret = new ReturnType("Label", n.f0.tokenImage);
      return _ret;
   }

}
