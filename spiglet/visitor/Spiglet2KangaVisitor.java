//
// Generated by JTB 1.3.2
//

package spiglet.visitor;
import java.util.Enumeration;

import spiglet.syntaxtree.BinOp;
import spiglet.syntaxtree.CJumpStmt;
import spiglet.syntaxtree.Call;
import spiglet.syntaxtree.ErrorStmt;
import spiglet.syntaxtree.Exp;
import spiglet.syntaxtree.Goal;
import spiglet.syntaxtree.HAllocate;
import spiglet.syntaxtree.HLoadStmt;
import spiglet.syntaxtree.HStoreStmt;
import spiglet.syntaxtree.IntegerLiteral;
import spiglet.syntaxtree.JumpStmt;
import spiglet.syntaxtree.Label;
import spiglet.syntaxtree.MoveStmt;
import spiglet.syntaxtree.NoOpStmt;
import spiglet.syntaxtree.Node;
import spiglet.syntaxtree.NodeList;
import spiglet.syntaxtree.NodeListOptional;
import spiglet.syntaxtree.NodeOptional;
import spiglet.syntaxtree.NodeSequence;
import spiglet.syntaxtree.NodeToken;
import spiglet.syntaxtree.Operator;
import spiglet.syntaxtree.PrintStmt;
import spiglet.syntaxtree.Procedure;
import spiglet.syntaxtree.SimpleExp;
import spiglet.syntaxtree.Stmt;
import spiglet.syntaxtree.StmtExp;
import spiglet.syntaxtree.StmtList;
import spiglet.syntaxtree.Temp;
import spiglet.spiglet2kanga.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Spiglet2KangaVisitor implements GJVisitor<String,Environment> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, Environment argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, Environment argu) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, Environment argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, Environment argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, Environment argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, Environment argu) {
      String _ret=null;
      
      argu.p_num = 1;
	  argu.s_num = 0;
      argu.k1 = false;
      argu.k2 = false;
      argu.k3 = false;
      
      argu.distribute_reg(1);
      argu.print("MAIN[0]["+(argu.stack_num+1)+"][20]");
      ++argu.tab_num;
      
      n.f1.accept(this, argu);
      --argu.tab_num;
      argu.print("END");
      n.f3.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, Environment argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, Environment argu) {
      String _ret=null;
      
      ++argu.p_num;
      argu.distribute_reg(argu.p_num);
      argu.pass_num = Integer.parseInt(n.f2.f0.tokenImage);
      argu.print(n.f0.f0.tokenImage+"["+n.f2.f0.tokenImage+"]["+(argu.stack_num+1)+"][20]");
      
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, Environment argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, Environment argu) {
      String _ret=null;

	  ++argu.s_num;
      argu.print("NOOP");
      
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, Environment argu) {
      String _ret=null;
      ++argu.s_num;
      argu.print("ERROR");
      
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
      String t1 = argu.get_temp(Integer.parseInt(n.f1.f1.f0.tokenImage));
      argu.print("CJUMP "+t1+" "+n.f2.f0.tokenImage+"_"+argu.p_num);
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
      argu.print("JUMP "+n.f1.f0.tokenImage+"_"+argu.p_num);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
      String t1 = argu.get_temp(Integer.parseInt(n.f1.f1.f0.tokenImage));
      if (t1.equals("t8")) {
    	  argu.print("MOVE t9 t8");
    	  t1 = "t9";
      }
      
      String i = n.f2.f0.tokenImage;
      String t2 = argu.get_temp(Integer.parseInt(n.f3.f1.f0.tokenImage));
      argu.print("HSTORE "+t1+" "+i+" "+t2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
	  int tmp1 = Integer.parseInt(n.f1.f1.f0.tokenImage);
	  if (argu.left[tmp1] > argu.s_num+1 || argu.right[tmp1] < argu.s_num)
		  return _ret;
      String t1 = argu.get_temp(Integer.parseInt(n.f1.f1.f0.tokenImage));
      if (t1.equals("t8")) {
    	  argu.print("MOVE t9 t8");
    	  t1 = "t9";
      }
      
      String t2 = argu.get_temp(Integer.parseInt(n.f2.f1.f0.tokenImage));
      String i = n.f3.f0.tokenImage;
      argu.print("HLOAD "+t1+" "+t2+" "+i);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
	  int t1 = Integer.parseInt(n.f1.f1.f0.tokenImage);
	  if (argu.left[t1] > argu.s_num+1 || argu.right[t1] < argu.s_num)
		  return _ret;
      n.f2.accept(this, argu);
      if (argu.is_stack[t1])
    	  argu.print("ASTORE "+argu.reg[t1]+" v0");
      else
    	  argu.print("MOVE "+argu.reg[t1]+" v0");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, Environment argu) {
      String _ret=null;
	  ++argu.s_num;
      String exp = n.f1.accept(this, argu);
      argu.print("PRINT "+exp);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, Environment argu) {
      String _ret=null;
      if (n.f0.which == 3)
    	  argu.k1 = true;
      n.f0.accept(this, argu);
      if (n.f0.which == 3)
    	  argu.k1 = false;
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, Environment argu) {
      String _ret=null;
      ++argu.tab_num;
      
      for (int i = 0; i < 20; ++i)
    	  argu.print("ASTORE SPILLEDARG "+(20+i)+" "+argu.reg_name[i]);
      for (int i = 0; i < argu.pass_num; ++i)
    	  if (argu.used[i] && !argu.is_stack[i] && argu.left[i] >= (argu.s_num+1))
    		  argu.print("ALOAD "+argu.reg[i]+" SPILLEDARG "+i);
      
      n.f1.accept(this, argu);
      
	  ++argu.s_num;
      String exp = n.f3.accept(this, argu);
      argu.print("MOVE v0 "+exp);
      
      for (int i = 0; i < 20; ++i)
    	  argu.print("ALOAD "+argu.reg_name[i]+" SPILLEDARG "+(20+i));
      --argu.tab_num;
      argu.print("END");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public String visit(Call n, Environment argu) {
      String _ret=null;
      argu.k3 = true;
      argu.tt = 0;
      n.f3.accept(this, argu);
      argu.k3 = false;
      String exp = n.f1.accept(this, argu);
      argu.print("CALL "+exp);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, Environment argu) {
      String _ret=null;
      String exp = n.f1.accept(this, argu);
      argu.print("MOVE v0 HALLOCATE "+exp);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, Environment argu) {
      String _ret=null;
      String t1 =argu.get_temp(Integer.parseInt(n.f1.f1.f0.tokenImage));
      if (t1.equals("t8")) {
    	  argu.print("MOVE t9 t8");
    	  t1 = "t9";
      }
      String exp = n.f2.accept(this, argu);
      String op="";
      if (n.f0.f0.which == 0)
    	  op = "LT";
      if (n.f0.f0.which == 1)
    	  op = "PLUS";
      if (n.f0.f0.which == 2)
    	  op = "MINUS";
      if (n.f0.f0.which == 3)
    	  op = "TIMES";
      argu.print("MOVE v0 "+op+" "+t1+" "+exp);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public String visit(Operator n, Environment argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, Environment argu) {
      String _ret=null;
      argu.k2 = true;
      String exp = n.f0.accept(this, argu);
      argu.k2 = false;
      if (argu.k1)
    	  argu.print("MOVE v0 "+exp);
      return exp;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, Environment argu) {
      String _ret=null;
      String t1 = argu.get_temp(Integer.parseInt(n.f1.f0.tokenImage));
      if (argu.k3)
    	  argu.print("PASSARG "+(++argu.tt)+" "+t1);
      return t1;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, Environment argu) {
      String _ret=null;
      return n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, Environment argu) {
      String _ret=null;
      if (argu.k2 == false) {
    	  argu.print(n.f0.tokenImage+"_"+argu.p_num);
		  ++argu.s_num;
	  }
      return n.f0.tokenImage;
   }
}
